---
meta:
  name:     (( param "Please name your pipeline" ))
  team:     (( param "Please provide expected concourse team to deploy test pipelines" ))
  pipeline: (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))

  image:
    name: starkandwayne/concourse
    tag: latest

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch_master: master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  cf:
    api:              https://api.run.pivotal.io
    skip_cert_check:  false
    username:         (( param "please provide cf.username" ))
    password:         (( param "please provide cf.password" ))
    organization:     (( param "please provide cf.organization" ))
    spaces:
      staging:        (( concat meta.name "-staging" ))
      production:     (( concat meta.name "-production" ))
    manifests:
      staging:        manifest.yml
      production:     manifest-production.yml

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - deploy-staging
      - deploy-production

jobs:
  - name: deploy-staging
    public: false
    serial: true
    plan:
      - get: app
        trigger: true
      - { get: image }
      - task: setup-app
        image: image
        config:
          platform: linux
          inputs: [{name: app}]
          outputs: [{name: app-with-setup}]
          run:
            path: app/ci/scripts/setup-app.sh
      - put: cf-push-staging
        params:
          manifest: (( concat "app-with-setup/" meta.cf.manifests.staging ))
          path: app-with-setup
          current_app_name: (( grab meta.cf.appname ))
          show_app_log: true
  - name: deploy-production
    public: false
    serial: true
    plan:
      - get: app
        trigger: false
        passed: [deploy-staging]
      - { get: image }
      - task: setup-app
        image: image
        config:
          platform: linux
          inputs: [{name: app}]
          outputs: [{name: app-with-setup}]
          run:
            path: app/ci/scripts/setup-app.sh
      - put: cf-push-production
        params:
          manifest: (( concat "app-with-setup/" meta.cf.manifests.production ))
          path: app-with-setup
          current_app_name: (( grab meta.cf.appname ))
          show_app_log: true

resources:
  - name: image
    type: docker-image
    source:
      repository: (( grab meta.image.name ))
      tag:        (( grab meta.image.tag ))

  - name: app
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch_master ))
      private_key: (( grab meta.github.private_key ))

  - name: cf-push-staging
    type:  cf-resource-with-tail
    source:
      api:             (( grab meta.cf.api ))
      skip_cert_check: (( grab meta.cf.skip_cert_check ))
      username:        (( grab meta.cf.username ))
      password:        (( grab meta.cf.password ))
      organization:    (( grab meta.cf.organization ))
      space:           (( grab meta.cf.spaces.staging ))

  - name: cf-push-production
    type:  cf-resource-with-tail
    source:
      api:             (( grab meta.cf.api ))
      skip_cert_check: (( grab meta.cf.skip_cert_check ))
      username:        (( grab meta.cf.username ))
      password:        (( grab meta.cf.password ))
      organization:    (( grab meta.cf.organization ))
      space:           (( grab meta.cf.spaces.production ))

resource_types:
- name: cf-resource-with-tail
  type: docker-image
  source:
    repository: govau/cf-resource
    tag: master

